import"vl-ui-form-message";import{html}from"lit-element";import{render}from"lit-html";class ConstraintViolations{constructor(){this.__violations=[]}isValid(){return 0===this.__violations.length}isInvalid(){return 0!==this.__violations.length}combine(t){return violations([...t.__violations,...this.__violations])}map(t){return this.__violations.map((e=>t(e)))}forEach(t){this.__violations.forEach((e=>t(e)))}get violations(){return this.__violations}}export const violations=t=>{const e=new ConstraintViolations;return e.__violations=Array.isArray(t)?t:[t],e};export const emptyViolations=()=>new ConstraintViolations;export const inputMixin=t=>class extends t{constructor(){super()}static get properties(){return{label:{type:String},name:{type:String},annotation:{type:String},value:{type:Object},noSubmit:{type:Boolean},validator:{type:Object,hasChanged:()=>!1}}}static _attributeNameForProperty(t,e){return super._attributeNameForProperty(this.__camelCaseToDash(t),e)}static __camelCaseToDash(t){return t.replace(/([a-zA-Z])(?=[A-Z])/g,"$1-").toLowerCase()}connectedCallback(){super.connectedCallback(),this.setAttribute("data-form-input",!0)}render(){return html`
      ${this.__renderLabel()}
      ${this.__renderAnnotation()}
      ${this.__renderInput()}
      ${this.__renderError()}
    `}__renderAnnotation(){return this.annotation?html`
      <p is="vl-form-annotation" data-vl-light>
        ${this.annotation}
      </p>`:html``}__renderLabel(){return html`
      <label is="vl-form-label" for="${this.name}" data-vl-block>
        ${this.label}
      </label>`}__renderError(){return html`
      <p is="vl-form-validation-message" id="errorMessage"></p>
    `}__renderInput(){throw new Error('You have to implement the "__renderInput()" method.')}get __input(){throw new Error('You have to implement the "getResource __input()" method.')}get __error(){return this.querySelector("#errorMessage")}async checkValidity(){return this.__validate(this.value)}focus(){this.__input.focus()}clear(){throw new Error('You have to implement the "clear()" method.')}async __validate(t){const e=await this.__validateInput(t);if(e.isValid()){this.__updateInput(!0);const e=this.__normalizeValue(t);this.__dispatchChangeEvent(e,this.value),this.value=e,this.showErrors([])}else this.value=t,this.__updateInput(!1),this.showErrors(e.violations);return e}showErrors(t){this.__updateInput(this.__isValid(t)),render(html`${t.map((t=>html`${t}<br/>`))}`,this.__error)}__dispatchChangeEvent(t,e){this._isChanged(t,e)&&this.dispatchEvent(new CustomEvent("change",{detail:t}))}_isChanged(t,e){return t!==e}__normalizeValue(t){return t}__isValid(t){return null===t||0===t.length}async __validateInput(t){return this.validator?this.validator(t):emptyViolations()}__updateInput(t){t?(this.__input.removeAttribute("data-vl-error"),this.__error.removeAttribute("data-vl-error")):(this.__input.setAttribute("data-vl-error",""),this.__error.setAttribute("data-vl-error",""))}};export const formMixin=t=>class extends t{constructor(){super()}get form(){return this.querySelector("form")}set formData(t){this.formInputs.forEach((e=>{const r=t[e.name];__setValue(e,r)}))}putFormValue(t,e){this.formInputs.filter((e=>e.name===t)).forEach((t=>this.__setValue(t,e)))}__setValue(t,e){try{t.value=e}catch(r){console.error(`failed setting input ${t.tagName} / ${t.id} with value ${e}`)}}async submitForm({valid:t,invalid:e,validator:r}){const i=this.formData;this.formInputs.forEach((t=>{t.noSubmit&&delete i[t.name]}));const a=this.__combineViolations(await this.checkFormValidity(),r?await r(i):{});this.__isEmpty(a)?t&&await t(i):(this.bindErrors((t=>a[t]?a[t]:emptyViolations())),e&&await e(a))}__combineViolations(t,e){const r={};for(const i in t)t.hasOwnProperty(i)&&e[i]&&t[i]&&(r[i]=t[i].combine(e[i]));return{...t,...e,...r}}__isEmpty(t){return 0===Object.entries(t).length}bindErrors(t){let e=null;this.formInputs.forEach((r=>{const i=t(r.name);!e&&i.isInvalid()&&(e=r),r.showErrors(i.violations)})),e&&e.focus()}putFieldError(t,e){this.formInputs.filter((e=>e.name===t)).forEach((t=>{t.showErrors(e)}))}async checkFormValidity(){const t={};for(const e of this.formInputs){const r=await e.checkValidity();r.isInvalid()&&(t[e.name]=r)}return t}get formData(){const t=this.formInputs.map((t=>({[t.name]:this.__extractValue(t)}))).reduce(((t,e)=>this.__reduceValues(t,e)),{propertyNames:[]});return delete t.propertyNames,t}get formInputs(){return Array.from(this.form.querySelectorAll("*[data-form-input]"))}clearFormInput(t){this.formInputs.filter((e=>e.name===t)).forEach((t=>t.clear()))}__extractValue(t){return t.hasAttribute("data-vl-switch")?t.checked:t.checked?t._inputElement.value:t.value}__reduceValues(t,e){for(const r in e){if(!1===e.hasOwnProperty(r))continue;const i=e[r];this.__transformMultiValue(t,r),void 0!==i&&this.__reduceValue(t,r,i)}return t}__reduceValue(t,e,r){Array.isArray(t[e])?t[e]=[...t[e],r]:t[e]=r}__transformMultiValue(t,e){t.propertyNames.includes(e)?Array.isArray(t[e])||(t[e]=t[e]?[t[e]]:[]):t.propertyNames=[...t.propertyNames,e]}};